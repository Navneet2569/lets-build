# .github/workflows/deploy.yml
name: Deploy Infra

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Use Azure CLI to compile the bicep (lint/build)
      - name: Bicep build (lint)
        uses: azure/cli@v1
        with:
          inlineScript: |
            az --version
            az bicep build --file ./deploy/main.bicep
            echo "Bicep build OK"

  validate:
    needs: lint
    runs-on: ubuntu-latest
    # If your Federated Credential subject is ENVIRONMENT-based, this MUST match exactly:
    environment: Testing Github Actions

    steps:
      - uses: actions/checkout@v4

      # DEBUG: Show the OIDC token claims minted by GitHub (issuer/subject/audience)
      - name: Show OIDC token (claims only)
        shell: bash
        run: |
          echo "Requesting GitHub OIDC token for audience api://AzureADTokenExchange..."
          RAW=$(curl -sSL "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" \
                 -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN")
          JWT=$(echo "$RAW" | jq -r '.value')
          PAYLOAD=$(echo "$JWT" | cut -d '.' -f2 | tr '_-' '/+' | awk '{ l=4-(length%4); if(l<4){printf "%s", $0; for(i=0;i<l;i++) printf "=" } else printf "%s", $0 }' | base64 -d 2>/dev/null)
          echo "OIDC JWT claims:"
          echo "$PAYLOAD" | jq .

      # Login to Azure via OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # DEBUG: Show Azure access token (redacted)
      - name: Show Azure access token (first 80 chars)
        run: |
          TOKEN=$(az account get-access-token --query accessToken -o tsv)
          echo "Azure access token (redacted): ${TOKEN:0:80}..."
          echo "Do not keep this step in production."

      # Preflight VALIDATE (uses ARM Deploy action with validation mode)
      - name: Run preflight validation
        uses: azure/arm-deploy@v1.1.0
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ secrets.AZURE_RG_NAME }}
          template: ./deploy/main.bicep
          parameters: ./deploy/parameters.prod.json
          deploymentMode: Validate
          failOnStdErr: false  # avoids the "response consumed" quirk on some failures

  preview:
    needs: validate
    runs-on: ubuntu-latest
    environment: Testing Github Actions

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: What-if (preview changes)
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group what-if \
              --resource-group ${{ secrets.AZURE_RG_NAME }} \
              --template-file ./deploy/main.bicep \
              --parameters @./deploy/parameters.prod.json

  deploy:
    needs: preview
    runs-on: ubuntu-latest
    environment: Testing Github Actions

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep to resource group
        uses: azure/arm-deploy@v1.1.0
        with:
          resourceGroupName: ${{ secrets.AZURE_RG_NAME }}
          template: ./deploy/main.bicep
          parameters: ./deploy/parameters.prod.json
          failOnStdErr: false