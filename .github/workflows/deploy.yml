name: Deploy Infra

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Build (lint) the Bicep to catch syntax issues early
      - name: Bicep build (lint)
        uses: azure/cli@v1
        with:
          inlineScript: |
            az --version
            az bicep build --file ./deploy/main.bicep
            echo "Bicep build OK"

  validate:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      ###########################################################################
      # 1) REQUEST & SAVE THE FULL GITHUB OIDC TOKEN (JWT) AS AN ARTIFACT
      ###########################################################################
      - name: Get FULL OIDC token and save to file
        shell: bash
        run: |
          set -e
          # Request an OIDC token with the Azure AD Token Exchange audience
          RAW=$(curl -sSL "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" \
                 -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN")
          # Extract the JWT (string) from the JSON
          echo "$RAW" | jq -r '.value' > oidc-jwt.txt
          echo "Saved OIDC JWT to oidc-jwt.txt"
          # Also decode claims for convenience
          JWT=$(cat oidc-jwt.txt)
          HDR=$(echo "$JWT" | cut -d '.' -f1)
          PAY=$(echo "$JWT" | cut -d '.' -f2)
          # Base64url decode header & payload (best effort)
          printf "%s" "$HDR" | tr '_-' '/+' | base64 -d 2>/dev/null > oidc-header.json || true
          printf "%s" "$PAY" | tr '_-' '/+' | base64 -d 2>/dev/null > oidc-payload.json || true
          echo "Decoded OIDC header → oidc-header.json"
          echo "Decoded OIDC payload → oidc-payload.json"

      - name: Upload OIDC token artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oidc-token
          path: |
            oidc-jwt.txt
            oidc-header.json
            oidc-payload.json
          if-no-files-found: error
          retention-days: 1   # keep extremely short

      ###########################################################################
      # 2) AZURE LOGIN VIA OIDC
      ###########################################################################
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      ###########################################################################
      # 3) REQUEST & SAVE THE FULL AZURE ACCESS TOKEN (ARM) AS ARTIFACTS
      ###########################################################################
      - name: Get FULL Azure ARM access token & metadata and save to files
        shell: bash
        run: |
          set -e
          # ARM access token (Bearer JWT)
          az account get-access-token --query accessToken -o tsv > arm-token.txt
          # Metadata (resource, expiresOn, tenant, etc.)
          az account get-access-token -o json > arm-token-metadata.json
          echo "Saved ARM token → arm-token.txt"
          echo "Saved ARM metadata → arm-token-metadata.json"
          # Optional: also get Microsoft Graph token if you need it
          # az account get-access-token --resource https://graph.microsoft.com/ --query accessToken -o tsv > graph-token.txt
          # echo "Saved Graph token → graph-token.txt"

      - name: Upload ARM token artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arm-token
          path: |
            arm-token.txt
            arm-token-metadata.json
            # graph-token.txt
          if-no-files-found: error
          retention-days: 1   # keep extremely short

      ###########################################################################
      # 4) VALIDATE THE TEMPLATE AGAINST THE RG SCOPE
      ###########################################################################
      - name: Validate template (group scope)
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group validate \
              --resource-group ${{ secrets.AZURE_RG_NAME }} \
              --template-file ./deploy/main.bicep \
              --parameters @./deploy/parameters.prod.json

  preview:
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: What-if (preview the changes)
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group what-if \
              --resource-group ${{ secrets.AZURE_RG_NAME }} \
              --template-file ./deploy/main.bicep \
              --parameters @./deploy/parameters.prod.json

  deploy:
    needs: preview
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy (group scope)
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group create \
              --name ${{ github.run_number }} \
              --resource-group ${{ secrets.AZURE_RG_NAME }} \
              --template-file ./deploy/main.bicep \
              --parameters @./deploy/parameters.prod.json